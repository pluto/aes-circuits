import { WitnessTester } from "circomkit";
import { circomkit } from "./common";

// signal input key[nk * 4];
// signal input initialCounterBlock[128];
// signal input plainText[INPUT_LEN];
// signal output cipherText[INPUT_LEN];
describe("GCTR", () => {
    let circuit: WitnessTester<["key", "initialCounterBlock", "plainText"], ["cipherText"]>;
    it("should encrypt the plaintext", async () => {
        circuit = await circomkit.WitnessTester(`GCTR`, {
            file: "aes-gcm/gctr",
            template: "GCTR",
            params: [129, 4],
        });
        await circuit.expectPass(
            {
                key: [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c],
                initialCounterBlock: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                plainText: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            },
            {
                cipherText: [0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a],
            }
        );
    });
});