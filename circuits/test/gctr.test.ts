import { WitnessTester } from "circomkit";
import { circomkit } from "./common";
import { assert } from "chai";

// signal input key[nk * 4];
// signal input initialCounterBlock[128];
// signal input plainText[INPUT_LEN];
// signal output cipherText[INPUT_LEN];
describe("GCTR", () => {
    let circuit: WitnessTester<["plainText", "initialCounterBlock", "key"], ["cipherText"]>;
    it("should encrypt the plaintext", async () => {
        circuit = await circomkit.WitnessTester(`GCTR`, {
            file: "aes-gcm/gctr",
            template: "GCTR",
            params: [16, 4],
        });

        // This test case works on CTR. 
        // const key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c];
        // const icb = [0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff];
        // const pt =  [0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a];
        // const ct = [0x87, 0x4d, 0x61, 0x91, 0xb6, 0x20, 0xe3, 0x26, 0x1b, 0xef, 0x68, 0x64, 0x99, 0x0d, 0xb6, 0xce];

        // GOOD TEST CASE. 
        const key = [0xca, 0xaa, 0x3f, 0x6f, 0xd3, 0x18, 0x22, 0xed, 0x2d, 0x21, 0x25, 0xf2, 0x25, 0xb0, 0x16, 0x9f];
        const icb = [0x7f, 0x6d, 0x90, 0x41, 0x48, 0x3e, 0x8c, 0x14, 0x12, 0xfa, 0x55, 0x2a, 0x00, 0x00, 0x00, 0x02];
        const column_wise_icb = [0x7f,0x48,0x12,0x00,0x6d,0x3e,0xfa,0x00,0x90,0x8c,0x55,0x00,0x41,0x14,0x2a,0x02]
        const pt = [0x84, 0xc9, 0x07, 0xb1, 0x1a, 0xe3, 0xb7, 0x9f,0xc4, 0x45, 0x1d, 0x1b, 0xf1, 0x7f, 0x4a, 0x99];  
        const ct = [0xfd, 0xb4, 0xaa, 0xfa, 0x35, 0x19, 0xd3, 0xc0,0x55, 0xbe, 0x8b, 0x34, 0x77, 0x64, 0xea, 0x33];

        // key: &hex!("caaa3f6fd31822ed2d2125f225b0169f"),
        // nonce: &hex!("7f6d9041483e8c1412fa552a"),
        // plaintext: &hex!("84c907b11ae3b79fc4451d1bf17f4a99"),
        // aad: &hex!(""),
        // ciphertext: &hex!("fdb4aafa3519d3c055be8b347764ea33"),

        // let key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c];
        // let icb = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        // let pt = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        // let ct = [0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a];

        // await circuit.expectPass({
        //         key: key,
        //         initialCounterBlock: icb,
        //         plainText: pt,
        //     },
        //     {
        //         cipherText: ct,
        //     }
        // );

        // signal input plainText[l];
        // signal input iv[16];
        // signal input key[nk * 4];
        // signal output cipher[l];

        const witness = await circuit.compute({ key: key, initialCounterBlock: column_wise_icb, plainText: pt }, ["cipherText"])

        assert.deepEqual(witness.cipherText, ct)
    });


    let circuit_ctr: WitnessTester<["plainText", "iv", "key"], ["cipher"]>;
    it("should encrypt the plaintext", async () => {
        circuit_ctr = await circomkit.WitnessTester(`GCTR2`, {
            file: "aes-ctr/ctr",
            template: "EncryptCTR",
            params: [16, 4],
        });

        // GOOD TEST CASE. 
        // - This came from rust crypto, modified the IV to append for bytes 0,0,0,2
        // - With that, the EncryptCTR creates expected CT. 
        const key = [0xca, 0xaa, 0x3f, 0x6f, 0xd3, 0x18, 0x22, 0xed, 0x2d, 0x21, 0x25, 0xf2, 0x25, 0xb0, 0x16, 0x9f];
        const icb = [0x7f, 0x6d, 0x90, 0x41, 0x48, 0x3e, 0x8c, 0x14, 0x12, 0xfa, 0x55, 0x2a, 0x00, 0x00, 0x00, 0x02];
        const pt = [0x84, 0xc9, 0x07, 0xb1, 0x1a, 0xe3, 0xb7, 0x9f,0xc4, 0x45, 0x1d, 0x1b, 0xf1, 0x7f, 0x4a, 0x99];  
        const ct = [0xfd, 0xb4, 0xaa, 0xfa, 0x35, 0x19, 0xd3, 0xc0,0x55, 0xbe, 0x8b, 0x34, 0x77, 0x64, 0xea, 0x33];

        const witness = await circuit_ctr.compute({ key: key, iv: icb, plainText: pt }, ["cipher"])

        assert.deepEqual(witness.cipher, ct)
    });
});