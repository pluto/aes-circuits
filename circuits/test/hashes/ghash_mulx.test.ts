import chai, { assert, expect } from "chai";
import { WitnessTester } from "circomkit";
import { bitArrayToHex, circomkit, hexToBitArray } from "../common";

// Disable truncation of arrays in error messages
chai.config.truncateThreshold = 0;

const mulXTestVectors = [
  "00800000000000000000000000000000",
  "00400000000000000000000000000000",
  "00200000000000000000000000000000",
  "00100000000000000000000000000000",
  "00080000000000000000000000000000",
  "00040000000000000000000000000000",
  "00020000000000000000000000000000",
  "00010000000000000000000000000000",
  "00008000000000000000000000000000",
  "00004000000000000000000000000000",
  "00002000000000000000000000000000",
  "00001000000000000000000000000000",
  "00000800000000000000000000000000",
  "00000400000000000000000000000000",
  "00000200000000000000000000000000",
  "00000100000000000000000000000000",
  "00000080000000000000000000000000",
  "00000040000000000000000000000000",
  "00000020000000000000000000000000",
  "00000010000000000000000000000000",
  "00000008000000000000000000000000",
  "00000004000000000000000000000000",
  "00000002000000000000000000000000",
  "00000001000000000000000000000000",
  "00000000800000000000000000000000",
  "00000000400000000000000000000000",
  "00000000200000000000000000000000",
  "00000000100000000000000000000000",
  "00000000080000000000000000000000",
  "00000000040000000000000000000000",
  "00000000020000000000000000000000",
  "00000000010000000000000000000000",
  "00000000008000000000000000000000",
  "00000000004000000000000000000000",
  "00000000002000000000000000000000",
  "00000000001000000000000000000000",
  "00000000000800000000000000000000",
  "00000000000400000000000000000000",
  "00000000000200000000000000000000",
  "00000000000100000000000000000000",
  "00000000000080000000000000000000",
  "00000000000040000000000000000000",
  "00000000000020000000000000000000",
  "00000000000010000000000000000000",
  "00000000000008000000000000000000",
  "00000000000004000000000000000000",
  "00000000000002000000000000000000",
  "00000000000001000000000000000000",
  "00000000000000800000000000000000",
  "00000000000000400000000000000000",
  "00000000000000200000000000000000",
  "00000000000000100000000000000000",
  "00000000000000080000000000000000",
  "00000000000000040000000000000000",
  "00000000000000020000000000000000",
  "00000000000000010000000000000000",
  "00000000000000008000000000000000",
  "00000000000000004000000000000000",
  "00000000000000002000000000000000",
  "00000000000000001000000000000000",
  "00000000000000000800000000000000",
  "00000000000000000400000000000000",
  "00000000000000000200000000000000",
  "00000000000000000100000000000000",
  "00000000000000000080000000000000",
  "00000000000000000040000000000000",
  "00000000000000000020000000000000",
  "00000000000000000010000000000000",
  "00000000000000000008000000000000",
  "00000000000000000004000000000000",
  "00000000000000000002000000000000",
  "00000000000000000001000000000000",
  "00000000000000000000800000000000",
  "00000000000000000000400000000000",
  "00000000000000000000200000000000",
  "00000000000000000000100000000000",
  "00000000000000000000080000000000",
  "00000000000000000000040000000000",
  "00000000000000000000020000000000",
  "00000000000000000000010000000000",
  "00000000000000000000008000000000",
  "00000000000000000000004000000000",
  "00000000000000000000002000000000",
  "00000000000000000000001000000000",
  "00000000000000000000000800000000",
  "00000000000000000000000400000000",
  "00000000000000000000000200000000",
  "00000000000000000000000100000000",
  "00000000000000000000000080000000",
  "00000000000000000000000040000000",
  "00000000000000000000000020000000",
  "00000000000000000000000010000000",
  "00000000000000000000000008000000",
  "00000000000000000000000004000000",
  "00000000000000000000000002000000",
  "00000000000000000000000001000000",
  "00000000000000000000000000800000",
  "00000000000000000000000000400000",
  "00000000000000000000000000200000",
  "00000000000000000000000000100000",
  "00000000000000000000000000080000",
  "00000000000000000000000000040000",
  "00000000000000000000000000020000",
  "00000000000000000000000000010000",
  "00000000000000000000000000008000",
  "00000000000000000000000000004000",
  "00000000000000000000000000002000",
  "00000000000000000000000000001000",
  "00000000000000000000000000000800",
  "00000000000000000000000000000400",
  "00000000000000000000000000000200",
  "00000000000000000000000000000100",
  "00000000000000000000000000000080",
  "00000000000000000000000000000040",
  "00000000000000000000000000000020",
  "00000000000000000000000000000010",
  "00000000000000000000000000000008",
  "00000000000000000000000000000004",
  "00000000000000000000000000000002",
  "00000000000000000000000000000001",
];

describe("ghash_GFMulX", () => {
  let circuit: WitnessTester<["in"], ["out"]>;

  describe("ghash GF Mul X test", () => {
    before(async () => {
      circuit = await circomkit.WitnessTester(`gfmulx`, {
        file: "aes-gcm/gfmulx",
        template: "ghash_GFMULX",
      });
      // console.log("#constraints:", await circuit.getConstraintCount());
    });

    it("test ghash at all bits set", async () => {
      let bits = hexToBitArray("01000000000000000000000000000000");
      for (let i = 0; i < mulXTestVectors.length; i++) {
        const expect = mulXTestVectors[i];
        const _res = await circuit.compute({ in: bits }, ["out"]);
        const result = bitArrayToHex(
          (_res.out as (number | bigint)[]).map((bit) => Number(bit))
        );
        // console.log("expect: ", expect, "\nresult: ", result);
        assert.equal(expect, result);
        bits = hexToBitArray(result);
      }
    });

    // ref: https://datatracker.ietf.org/doc/html/rfc8452#appendix-A
    it("compute IETF test 2", async () => {
      let bits = hexToBitArray("9c98c04df9387ded828175a92ba652d8");
      let expect = "4e4c6026fc9c3ef6c140bad495d3296c";
      const _res = await circuit.compute({ in: bits }, ["out"]);
      const result = bitArrayToHex(
        (_res.out as (number | bigint)[]).map((bit) => Number(bit))
      );
      // console.log("expect: ", expect, "\nresult: ", result);
      assert.equal(expect, result);
    });
  });
});
